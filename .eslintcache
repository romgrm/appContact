[{"/Users/romgrm/Desktop/Appli_Contact/appcontact/src/index.js":"1","/Users/romgrm/Desktop/Appli_Contact/appcontact/src/App.js":"2","/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/Header.js":"3","/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/Contact.js":"4","/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/Liste.js":"5","/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Context.js":"6","/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/AddContact.js":"7","/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/APropos.js":"8","/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/Erreur.js":"9"},{"size":197,"mtime":1606933160964,"results":"10","hashOfConfig":"11"},{"size":1580,"mtime":1607094770365,"results":"12","hashOfConfig":"11"},{"size":1490,"mtime":1607093324089,"results":"13","hashOfConfig":"11"},{"size":2813,"mtime":1607091454871,"results":"14","hashOfConfig":"11"},{"size":2514,"mtime":1607092628931,"results":"15","hashOfConfig":"11"},{"size":3390,"mtime":1607090831009,"results":"16","hashOfConfig":"11"},{"size":5087,"mtime":1607094337863,"results":"17","hashOfConfig":"11"},{"size":358,"mtime":1607093397117,"results":"18","hashOfConfig":"11"},{"size":180,"mtime":1607094786401,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"17flln2",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/romgrm/Desktop/Appli_Contact/appcontact/src/index.js",[],["40","41"],"/Users/romgrm/Desktop/Appli_Contact/appcontact/src/App.js",[],"/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/Header.js",[],"/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/Contact.js",[],"/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/Liste.js",[],"/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Context.js",[],"/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/AddContact.js",["42"],"import React, { Component } from 'react'\nimport Contact from './Contact'\nimport { Consumer } from '../Context'\nimport {v1 as uuid} from 'uuid'\n\nexport default class AddContact extends Component {\n\n    state = {\n        contact: 'Developpeur',\n        nom: '',\n        prenom: '',\n        mail: ''\n    }\n\n    onChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value // [event.target.name] -> récupère tous les 'name' des inputs (donc nom,prenom,mail). event.target.valuue -> récupère tous les 'value' des inputs.\n        })\n    }\n\n    onSubmit = (dispatch, event) => {\n        event.preventDefault()\n        \n        // Ce newContact correspond au (action.payload) de notre Dispatch, c'est l'action ajouter contact, c'est ces données qui vont être ajoutées au State actuel\n        const newContact={\n            id: uuid(), // id auto-généré dès qu'un contact est créé grâce au module 'uuid' importé \n            contact: this.state.contact,\n            nom: this.state.nom,\n            prenom: this.state.prenom,\n            mail: this.state.mail\n        }\n\n        // Ici on execute le dispatch avec le même type d'action qu'on a déclaré dans le Context.js, et l'action à envoyer (payload) c'est notre newContact\n        dispatch({type:'ADD_CONTACT', payload: newContact})\n\n        // Permet de remettre à 0 nos inputs \n        this.setState({\n            nom: '',\n            prenom: '',\n            mail: ''\n        })\n\n        this.props.history.push('/') // permet de rediriger vers la page d'accueil afin de voir directement notre contact ajouté\n    }\n    render() {\n\n        // Notre component aura donc accès au state global (les contacts déjà existants) ainsi qu'a l'action 'ADD_CONTACT' pour ajouter un contact au state existant\n        return (\n            <Consumer>\n                {value => {\n                    return (\n                        <div className=\"card text-center\">\n                            <div className=\" card-header\">Ajouter un contact</div>\n\n                            <div className=\"card-body\">\n                                <form onSubmit={this.onSubmit.bind(this, value.dispatch)}> {/** Pour l'envoie du formulaire, on doit utiliser le dispatch vu qu'on est dans un\n                                 * Provider. Donc pour utiliser le dispatch en argument pour notre onSubmit(), on utilise le .bind() qui permet de retourner la valeur/fonction\n                                 * current (le this), puis l'autre argument à ajouter, en l'occurence notre dispatch qui est dans le state et qui va servir pour executer l'action addContact\n                                 */}\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"nom\">Nom</label>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"nom\"\n                                            placeholder=\"Entrez votre nom\"\n                                            style={{ textCenter: 'center' }}\n                                            onChange={this.onChange}\n                                            value={this.state.nom}\n                                        ></input>\n                                        <label htmlFor=\"prenom\" className=\"mt-3\">Prénom</label>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"prenom\"\n                                            placeholder=\"Entrez votre prenom\"\n                                            onChange={this.onChange}\n                                            value={this.state.prenom}\n                                        ></input>\n                                        <label htmlFor=\"mail\" className=\"mt-3\">Mail</label>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"mail\"\n                                            placeholder=\"Entrez votre e-mail\"\n                                            onChange={this.onChange}\n                                            value={this.state.mail}\n                                        ></input>\n                                        <input\n                                            type=\"submit\"\n                                            value=\"Ajouter\"\n                                            className=\"btn btn-info mt-4\">\n                                        </input>\n\n                                    </div>\n\n                                </form>\n                            </div>\n\n                        </div>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n","/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/APropos.js",[],"/Users/romgrm/Desktop/Appli_Contact/appcontact/src/Components/Erreur.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":2,"column":8,"nodeType":"49","messageId":"50","endLine":2,"endColumn":15},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'Contact' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]